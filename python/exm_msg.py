# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_exm_msg', [dirname(__file__)])
        except ImportError:
            import _exm_msg
            return _exm_msg
        if fp is not None:
            try:
                _mod = imp.load_module('_exm_msg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _exm_msg = swig_import_helper()
    del swig_import_helper
else:
    import _exm_msg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, message, name)
    __repr__ = _swig_repr
    INT_DEBUG = _exm_msg.message_INT_DEBUG
    DEBUG = _exm_msg.message_DEBUG
    INFORMATION = _exm_msg.message_INFORMATION
    NOTE = _exm_msg.message_NOTE
    WARNING = _exm_msg.message_WARNING
    ERROR = _exm_msg.message_ERROR
    INTERNAL = _exm_msg.message_INTERNAL
    FATAL = _exm_msg.message_FATAL
    MAX_LEVEL = _exm_msg.message_MAX_LEVEL
    def __init__(self): 
        this = _exm_msg.new_message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _exm_msg.delete_message
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _exm_msg.message_instance
    if _newclass:instance = staticmethod(_exm_msg.message_instance)
    __swig_getmethods__["destroy"] = lambda x: _exm_msg.message_destroy
    if _newclass:destroy = staticmethod(_exm_msg.message_destroy)
    def verbosity(self, *args): return _exm_msg.message_verbosity(self, *args)
    def int_debug(self, *args): return _exm_msg.message_int_debug(self, *args)
    def debug(self, *args): return _exm_msg.message_debug(self, *args)
    def information(self, *args): return _exm_msg.message_information(self, *args)
    def note(self, *args): return _exm_msg.message_note(self, *args)
    def warning(self, *args): return _exm_msg.message_warning(self, *args)
    def error(self, *args): return _exm_msg.message_error(self, *args)
    def internal(self, *args): return _exm_msg.message_internal(self, *args)
    def fatal(self, *args): return _exm_msg.message_fatal(self, *args)
message_swigregister = _exm_msg.message_swigregister
message_swigregister(message)

def message_instance():
  return _exm_msg.message_instance()
message_instance = _exm_msg.message_instance

def message_destroy():
  return _exm_msg.message_destroy()
message_destroy = _exm_msg.message_destroy

# This file is compatible with both classic and new-style classes.


